openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
    
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: 'TestUser'
        password:
          type: string
          example: '12345'
      required:
      - login
      - password

    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: '12345'
        newPassword:
          type: string
          example: 'qwerty'
      required:
        - oldPassword
        - newPassword
    
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy

    CreateArtist:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - duration

    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          format: uuid
        albumId:
          type: string
          format: uuid
        duration:
          type: integer
          description: In seconds
      required:
        - name
        - duration
    
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
        - year

    CreateAlbumDto:
      type: object
      title: example
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - name
        - year
    
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'


paths:
  /user:
    get:
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    
    post:
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. body does not contain required fields
  /user/{id}:
    parameters:
    - in: path
      name: id
      required: true
      schema:
        type: string
        format: uuid
    get:
      summary: Get single user by id
      description: Get single user by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. userId is invalid (not uuid)
        404:
          description: User not found
      
    put:
      summary: Update a user's password
      description: Updates a user's password by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. userId is invalid (not uuid)
        403:
          description: oldPassword is wrong
        404:
          description: User not found

    delete:
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        400:
          description: Bad request. userId is invalid (not uuid)
        404:
          description: User not found

  /track:
    get:
      summary: Get tracks list
      description: Gets all library tracks list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
    post:
      summary: Add new track
      description: Add new track information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. body does not contain required fields
  /tracks/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get single track by id
      description: Gets single track by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. trackId is invalid (not uuid)
        404:
          description: Track was not found.
    put:
      summary: Update track information
      description: Update library track information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        200:
          description: The track has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Bad request. trackId is invalid (not uuid)
        404:
          description: Track was not found.
    delete:
      summary: Delete track
      description: Delete track from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. trackId is invalid (not uuid)
        404:
          description: Track was not found.

  /artists:
      get:
        summary: Get all artists
        description: Gets all artists
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Artist'
      post:
        summary: Add new artist
        description: Add new artist
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArtist'
        responses:
          201:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Artist'
          400:
            description: Bad request. body does not contain required fields
  /artists/{id}:
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      get:
        summary: Get single artist by id
        description: Get single artist by id
        responses:
          200:
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Artist'
          400:
            description: Bad request. artistId is invalid (not uuid)
          404:
            description: Artist was not found.
      put:
        summary: Update artist information
        description: Update artist information by UUID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateArtist'
        responses:
          200:
            description: The artist has been updated.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Artist'
          400:
            description: Bad request. artistId is invalid (not uuid)
          404:
            description: Artist was not found.
      delete:
        summary: Delete artist
        description: Delete artist from library
        responses:
          204:
            description: Deleted successfully
          400:
            description: Bad request. artistId is invalid (not uuid)
          404:
            description: Artist was not found.

  /albums:
    get:
      summary: Get albums list
      description: Gets all library albums list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      summary: Add new album
      description: Add new album information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        201:
          description: Album is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. body does not contain required fields
  /albums/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get single album by id
      description: Gets single album by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
        404:
          description: Album was not found.
    put:
      summary: Update album information
      description: Update library album information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        200:
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Bad request. albumId is invalid (not uuid)
        404:
          description: Album was not found.
    delete:
      summary: Delete album
      description: Delete album from library
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. albumId is invalid (not uuid)
        404:
          description: Album was not found.

  /favs:
    get:
      summary: Get all favorites
      description: Gets all favorites albums, tracks and artists
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
  /favs/track/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad request. trackId is invalid (not uuid)
        422:
          description: Track with id doesn't exist.
    delete:
      summary: Delete track from favorites
      description: Delete track from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. trackId is invalid (not uuid)
        404:
          description: Track was not found.
  /favs/album/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad request. albumId is invalid (not uuid)
        422:
          description: Album with id doesn't exist.
    delete:
      summary: Delete album from favorites
      description: Delete album from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. albumId is invalid (not uuid)
        404:
          description: Album was not found.
  /favs/artist/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    post:
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: Added successfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        422:
          description: Artist with id doesn't exist.
    delete:
      summary: Delete artist from favorites
      description: Delete artist from favorites
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. artistId is invalid (not uuid)
        404:
          description: Artist was not found.